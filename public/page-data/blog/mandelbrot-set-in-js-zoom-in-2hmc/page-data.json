{"componentChunkName":"component---src-templates-blog-js","path":"/blog/mandelbrot-set-in-js-zoom-in-2hmc","result":{"data":{"devArticles":{"article":{"tags":["javascript","mandelbrot","zoom","worker"],"slug":"mandelbrot-set-in-js-zoom-in-2hmc","title":"Mandelbrot Set in JS - Zoom In","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--4o41A05t--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/ft541otwdktnxw60w98x.png","description":"In the previous blog, I explained a little bit about the theory behind the mandelbrot set, also I imp...","published_at":"May 26 2020","edited_at":"Sep 05 2020","positive_reactions_count":6,"comments_count":0,"body_html":"<p>In the previous <a href=\"https://dev.to/foqc/mandelbrot-set-in-js-480o\">blog</a>, I explained a little bit about the theory behind the <strong>mandelbrot set</strong>, also I implemented a JavaScript version to plot it. In this blog I will show you, how to make the zoom effect on the set, using JavaScript and <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Workers</a></strong>.</p>\n\n<p>The result of the zoom in will be as follows:<br>\n<iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/I0wPiKkPI0w\" allowfullscreen loading=\"lazy\">\n</iframe>\n</p>\n\n<p>Now that you have just watched the video I know that you are very interested and curious, about it, so let's begin!.</p>\n\n<p>I had thought this would be easy, however, it was complicated for several reasons that I summarize below:</p>\n\n<ul>\n<li>The code implemented in the previous blog was very inefficient <strong>O(n*m)</strong> in terms of time, also known as <a href=\"https://www.hackerearth.com/practice/basic-programming/complexity-analysis/time-and-space-complexity/tutorial/\">time complexity</a>, which caused the amount of time needed to plot the entire canvas become too high.</li>\n<li>Despite several improvements I made to the algorithm, it was still very inefficient, so I decided to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">workers</a>.</li>\n</ul>\n\n<p>Let's see how I solved the problems presented above.</p>\n\n<h2>\n  <a name=\"mandelbrot-set\" href=\"#mandelbrot-set\" class=\"anchor\">\n  </a>\n  Mandelbrot set\n</h2>\n\n<p>As usual with me, I will explain each piece of code used.</p>\n\n<p><strong><em>Some of code blocks were already explained in the previous blog, so I'm just going to focus on the new ones.</em></strong></p>\n\n<p>I declare <strong>worker</strong> to store the reference to my worker class, <strong>colorPalette</strong> to store a <strong><em>rgb</em></strong> colors, <strong>ZOOM_FACTOR</strong>, it's a scaling factor for the zoom in, and the last one is <strong>TASK</strong>, I will use it to save the index of each column of my canvas (I will enter into detail later).<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">canvas</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">myCanvas</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">getContext</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">2d</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">WIDTH</span> <span class=\"o\">=</span> <span class=\"mi\">800</span>\n<span class=\"kd\">const</span> <span class=\"nx\">HEIGHT</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">width</span> <span class=\"o\">=</span> <span class=\"nx\">WIDTH</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"nx\">HEIGHT</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">worker</span>\n<span class=\"kd\">let</span> <span class=\"nx\">colorPalette</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"kd\">let</span> <span class=\"nx\">REAL_SET</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n<span class=\"kd\">let</span> <span class=\"nx\">IMAGINARY_SET</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">ZOOM_FACTOR</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"kd\">const</span> <span class=\"nx\">TASKS</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</code></pre></div>\n\n\n\n<p>I decided to create a different palette color so I have used a simplified version of <strong><a href=\"https://en.wikipedia.org/wiki/Interpolation\">interpolation</a></strong> to create different <a href=\"https://youtu.be/UaLN9sTM7rk\">colors</a>.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">lagrange</span> <span class=\"o\">=</span> <span class=\"p\">([</span><span class=\"nx\">X1</span><span class=\"p\">,</span> <span class=\"nx\">Y1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">X2</span><span class=\"p\">,</span> <span class=\"nx\">Y2</span><span class=\"p\">],</span> <span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n   <span class=\"p\">(((</span><span class=\"nx\">Y1</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">-</span> <span class=\"nx\">X2</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"nx\">X1</span> <span class=\"o\">-</span> <span class=\"nx\">X2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"nx\">Y2</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">-</span> <span class=\"nx\">X1</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"nx\">X2</span> <span class=\"o\">-</span> <span class=\"nx\">X1</span><span class=\"p\">)))</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">makeRGB</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span> <span class=\"nx\">g</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">calculate</span> <span class=\"o\">=</span> <span class=\"nx\">pair</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">lagrange</span><span class=\"p\">(</span><span class=\"nx\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nx\">k</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">))</span> <span class=\"nx\">r</span> <span class=\"o\">=</span> <span class=\"nx\">calculate</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">g</span><span class=\"p\">))</span> <span class=\"nx\">g</span> <span class=\"o\">=</span> <span class=\"nx\">calculate</span><span class=\"p\">(</span><span class=\"nx\">g</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">))</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">calculate</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nx\">r</span><span class=\"p\">,</span> <span class=\"nx\">g</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">palette</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"mi\">250</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">range</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">/</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">colors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">c</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">k</span> <span class=\"o\">&lt;</span> <span class=\"nx\">size</span><span class=\"p\">;</span> <span class=\"nx\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">k</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">range</span><span class=\"p\">)</span><span class=\"c1\">//red to yellow</span>\n            <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">makeRGB</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">range</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">k</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"c1\">//yellow to green</span>\n            <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">makeRGB</span><span class=\"p\">([[</span><span class=\"nx\">range</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">k</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"c1\">//green to cyan</span>\n            <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">makeRGB</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]],</span> <span class=\"nx\">k</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">k</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"c1\">//cyan to blue</span>\n            <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">makeRGB</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">k</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"c1\">//blue to purple</span>\n            <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">makeRGB</span><span class=\"p\">([[</span><span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"c1\">//purple to red</span>\n            <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">makeRGB</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"nx\">range</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"nx\">k</span><span class=\"p\">)</span>\n\n        <span class=\"nx\">colors</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">colors</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>In the previous code block, the function <strong>palette</strong> is creating <strong>250</strong> colors. The interpolation is done between <strong>6</strong> colors, those are: <strong><em>RED</em></strong> - <strong><em>YELLOW</em></strong> - <strong><em>GREEN</em></strong> - <strong><em>CYAN</em></strong> - <strong><em>BLUE</em></strong> - <strong><em>PURPLE</em></strong><br>\nWhat result in a color palette called <strong>rainbow colors</strong>.</p>\n\n<p>To improve time complexity in plot function, I will store in an array each column index; after that, the first index of the <strong>column</strong> will be sent <strong><em>(postMessage)</em></strong> to a worker which will calculate the values ​​of each point that belongs to the <strong>rows</strong>.<br>\nIn summary, only <strong>one line</strong> of each column of the mandelbrot set will be calculated <strong>at once</strong>.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">col</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">col</span> <span class=\"o\">&lt;</span> <span class=\"nx\">WIDTH</span><span class=\"p\">;</span> <span class=\"nx\">col</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"nx\">TASKS</span><span class=\"p\">[</span><span class=\"nx\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">col</span>\n    <span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">postMessage</span><span class=\"p\">({</span> <span class=\"na\">col</span><span class=\"p\">:</span> <span class=\"nx\">TASKS</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">()</span> <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>In the next code is explained how the <strong>rest of lines</strong> are calculated and plotted.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">draw</span> <span class=\"o\">=</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">TASKS</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">postMessage</span><span class=\"p\">({</span> <span class=\"na\">col</span><span class=\"p\">:</span> <span class=\"nx\">TASKS</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">()</span> <span class=\"p\">})</span>\n\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">col</span><span class=\"p\">,</span> <span class=\"nx\">mandelbrotSets</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">m</span><span class=\"p\">,</span> <span class=\"nx\">isMandelbrotSet</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">mandelbrotSets</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n        <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">isMandelbrotSet</span> <span class=\"p\">?</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"nx\">colorPalette</span><span class=\"p\">[</span><span class=\"nx\">m</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nx\">colorPalette</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">fillStyle</span> <span class=\"o\">=</span> <span class=\"s2\">`rgb(</span><span class=\"p\">${</span><span class=\"nx\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">c</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]}</span><span class=\"s2\">)`</span>\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">fillRect</span><span class=\"p\">(</span><span class=\"nx\">col</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>The <strong>draw</strong> function will receive the response of the <strong>worker</strong> as parameter, this contains the <strong>mandelbrot set values</strong> for a specific <strong>column</strong>. If there are still column values ​​to calculate, a message with next column index is sent to <strong>worker</strong>. Then the line of values that has been calculated by the worker is drawn on the canvas.<br>\nThis function will be called over and over again, as a <strong>recursive process</strong>, since the <strong>worker listens</strong> to the messages that are sent from this function and this in turn, listens to the messages sent by the worker, as long as there are column values ​​to be processed.</p>\n\n<p>Well, it's time to create the function that orchestrates each of the functions explained so far.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">init</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">worker</span><span class=\"p\">)</span> <span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">terminate</span><span class=\"p\">()</span>\n    <span class=\"nx\">worker</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Worker</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">worker.js</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">postMessage</span><span class=\"p\">({</span> <span class=\"na\">w</span><span class=\"p\">:</span> <span class=\"nx\">WIDTH</span><span class=\"p\">,</span> <span class=\"na\">h</span><span class=\"p\">:</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">,</span> <span class=\"na\">realSet</span><span class=\"p\">:</span> <span class=\"nx\">REAL_SET</span><span class=\"p\">,</span> <span class=\"na\">imaginarySet</span><span class=\"p\">:</span> <span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">,</span> <span class=\"na\">isSettingUp</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n    <span class=\"nx\">start</span><span class=\"p\">()</span>\n    <span class=\"nx\">colorPalette</span> <span class=\"o\">=</span> <span class=\"nx\">palette</span><span class=\"p\">()</span>\n    <span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"nx\">draw</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>I have called <strong>init</strong> to the function, which will be the first to run.<br>\nIf <strong>worker</strong> already exists, this thread is killed.<br>\nAfter this, a new worker is created, then a message is sent to the worker, this first message is only to <strong>send the necessary parameters</strong> for the mandelbrot set computations.</p>\n\n<p>Once the worker has been configured, the <strong>start</strong> function is executed.</p>\n\n<p>Finally, draw function will listen the worker messages, <strong>worker.onmessage = draw</strong>, is a function to be called when the message event occurs.</p>\n<h2>\n  <a name=\"adding-worker\" href=\"#adding-worker\" class=\"anchor\">\n  </a>\n  Adding worker\n</h2>\n\n<p>Due to performance issues discussed at the beginning, the heaviest task that is mandlebrot set computations is moved to a worker.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">//worker.js</span>\n<span class=\"kd\">let</span> <span class=\"nx\">WIDTH</span><span class=\"p\">,</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">,</span> <span class=\"nx\">REAL_SET</span><span class=\"p\">,</span> <span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">,</span> <span class=\"nx\">END_START_RL</span><span class=\"p\">,</span> <span class=\"nx\">END_START_IM</span>\n<span class=\"kd\">const</span> <span class=\"nx\">MAX_ITERATION</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n\n<span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">isSettingUp</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isSettingUp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">w</span><span class=\"p\">,</span> <span class=\"nx\">h</span><span class=\"p\">,</span> <span class=\"nx\">realSet</span><span class=\"p\">,</span> <span class=\"nx\">imaginarySet</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span>\n\n        <span class=\"nx\">REAL_SET</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"nx\">realSet</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">,</span> <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"nx\">realSet</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"p\">}</span>\n        <span class=\"nx\">IMAGINARY_SET</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"nx\">imaginarySet</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">,</span> <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"nx\">imaginarySet</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"p\">}</span>\n\n        <span class=\"nx\">END_START_RL</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">REAL_SET</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"o\">-</span> <span class=\"nx\">REAL_SET</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">)</span>\n        <span class=\"nx\">END_START_IM</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"o\">-</span> <span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">)</span>\n\n        <span class=\"nx\">WIDTH</span> <span class=\"o\">=</span> <span class=\"nx\">w</span>\n        <span class=\"nx\">HEIGHT</span> <span class=\"o\">=</span> <span class=\"nx\">h</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">col</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">mandelbrotSets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">row</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">row</span> <span class=\"o\">&lt;</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">;</span> <span class=\"nx\">row</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"nx\">mandelbrotSets</span><span class=\"p\">[</span><span class=\"nx\">row</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">calculate</span><span class=\"p\">(</span><span class=\"nx\">col</span><span class=\"p\">,</span> <span class=\"nx\">row</span><span class=\"p\">)</span>\n\n        <span class=\"nx\">postMessage</span><span class=\"p\">({</span> <span class=\"nx\">col</span><span class=\"p\">,</span> <span class=\"nx\">mandelbrotSets</span> <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">calculate</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">j</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">mandelbrot</span><span class=\"p\">(</span><span class=\"nx\">relativePoint</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">j</span><span class=\"p\">))</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">relativePoint</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">REAL_SET</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">/</span> <span class=\"nx\">WIDTH</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">END_START_RL</span><span class=\"p\">)</span>\n    <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">y</span> <span class=\"o\">/</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">END_START_IM</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">mandelbrot</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">p</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">*</span> <span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">y</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">,</span>\n            <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">+</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">y</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"nx\">n</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">d</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">n</span> <span class=\"o\">&lt;</span> <span class=\"nx\">MAX_ITERATION</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">d</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>The function <strong>onmessage</strong>, will listen for the messages that are sent from the main thread.<br>\nIf is setting up, the necessary parameters for the computations are saved in the global variables and it does not send any message.</p>\n\n<p>Otherwise, the values ​​for the set are calculated for each of the columns, then those values are sent to main thread as response.</p>\n\n<p>The functions <strong>relativePoint</strong> and <strong>mandelbrot</strong> were already explained in the previous blog.</p>\n<h2>\n  <a name=\"zoom-in\" href=\"#zoom-in\" class=\"anchor\">\n  </a>\n  Zoom In\n</h2>\n\n<p>We have already improved the time it takes to plot the mandelbrot set, but How the hell do I <strong>zoom in</strong> over this image?</p>\n\n<p>Well, the answer is simple, it is only necessary to <strong>shrink</strong> the <strong>real and imaginary values</strong> ​​each time that a specific part of the canvas is clicked.</p>\n\n<p>Let's see the range of values ​​that have the real and imaginary part:</p>\n\n<ul>\n<li>\n<strong>REAL_SET:</strong> the domain in <strong>x</strong> axis goes from <strong>-2 to 1</strong>.</li>\n<li>\n<strong>IMAGINARY_SET:</strong> the domain in <strong>y</strong> axis goes from <strong>-1 to 1</strong>.</li>\n</ul>\n\n<p>So, the idea is to decrease each of the values ​​that the set can take in both the real and imaginary parts.</p>\n\n<p>For instance:</p>\n\n<ul>\n<li>\n<strong>REAL_SET:</strong> start -1, end: 0.5</li>\n<li>\n<strong>IMAGINARY_SET:</strong> start -0.5, end: 0.5</li>\n</ul>\n\n<p>This is what the following function does every time that every time that the double click event occurs on a specific part of the canvas, according to a scaling factor (<strong><em>ZOOM_FACTOR</em></strong>).<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">//mandelbrot.js</span>\n<span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">dblclick</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">zfw</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">WIDTH</span> <span class=\"o\">*</span> <span class=\"nx\">ZOOM_FACTOR</span><span class=\"p\">)</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">zfh</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">HEIGHT</span> <span class=\"o\">*</span> <span class=\"nx\">ZOOM_FACTOR</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">REAL_SET</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"nx\">getRelativePoint</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">pageX</span> <span class=\"o\">-</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">offsetLeft</span> <span class=\"o\">-</span> <span class=\"nx\">zfw</span><span class=\"p\">,</span> <span class=\"nx\">WIDTH</span><span class=\"p\">,</span> <span class=\"nx\">REAL_SET</span><span class=\"p\">),</span>\n        <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"nx\">getRelativePoint</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">pageX</span> <span class=\"o\">-</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">offsetLeft</span> <span class=\"o\">+</span> <span class=\"nx\">zfw</span><span class=\"p\">,</span> <span class=\"nx\">WIDTH</span><span class=\"p\">,</span> <span class=\"nx\">REAL_SET</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">IMAGINARY_SET</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"nx\">getRelativePoint</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">pageY</span> <span class=\"o\">-</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">offsetTop</span> <span class=\"o\">-</span> <span class=\"nx\">zfh</span><span class=\"p\">,</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">,</span> <span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">),</span>\n        <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"nx\">getRelativePoint</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">pageY</span> <span class=\"o\">-</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">offsetTop</span> <span class=\"o\">+</span> <span class=\"nx\">zfh</span><span class=\"p\">,</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">,</span> <span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">init</span><span class=\"p\">()</span>\n<span class=\"p\">})</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">getRelativePoint</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">pixel</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"kd\">set</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n   <span class=\"kd\">set</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">pixel</span> <span class=\"o\">/</span> <span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"kd\">set</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"o\">-</span> <span class=\"kd\">set</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n\n<h2>\n  <a name=\"results\" href=\"#results\" class=\"anchor\">\n  </a>\n  Results\n</h2>\n\n<p>That's it, when you press double click on any part of the canvas, you will see the following images.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--glGQvON4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3tundui1d404aetfni4q.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--glGQvON4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3tundui1d404aetfni4q.png\" alt=\"Mandelbrot 1\" loading=\"lazy\"></a><br>\n<strong>Figure 1.</strong> Mandelbrot set, example 1.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uLIsQ-pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ktx8st3pl61mcw9jiuq2.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uLIsQ-pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ktx8st3pl61mcw9jiuq2.png\" alt=\"Mandelbrot 2\" loading=\"lazy\"></a><br>\n<strong>Figure 2.</strong> Mandelbrot set, example 2.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RC_6r-qN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e03ryumok9eb7mzcangp.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RC_6r-qN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e03ryumok9eb7mzcangp.png\" alt=\"Mandelbrot 3\" loading=\"lazy\"></a><br>\n<strong>Figure 3.</strong> Mandelbrot set, example 3.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--f9O7qHmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f6rvxe6w0033a08iirwt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--f9O7qHmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f6rvxe6w0033a08iirwt.png\" alt=\"Mandelbrot 4\" loading=\"lazy\"></a><br>\n<strong>Figure 4.</strong> Mandelbrot set, example 4.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--E95jjBzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tffuz7qx694lk6dfdsh0.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--E95jjBzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tffuz7qx694lk6dfdsh0.png\" alt=\"Mandelbrot 5\" loading=\"lazy\"></a><br>\n<strong>Figure 5.</strong> Mandelbrot set, example 5.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7FOCqxBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r8oz2u50tqk30tsimdff.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7FOCqxBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r8oz2u50tqk30tsimdff.png\" alt=\"Mandelbrot 6\" loading=\"lazy\"></a><br>\n<strong>Figure 6.</strong> Mandelbrot set, example 6.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Djp2teE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j7o0912trkashvfd51cc.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Djp2teE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j7o0912trkashvfd51cc.png\" alt=\"Mandelbrot 7\" loading=\"lazy\"></a><br>\n<strong>Figure 7.</strong> Mandelbrot set, example 7.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--M3bEqtIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ak8j1tqgtrqgkpb1p6qe.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--M3bEqtIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ak8j1tqgtrqgkpb1p6qe.png\" alt=\"Mandelbrot 8\" loading=\"lazy\"></a><br>\n<strong>Figure 8.</strong> Mandelbrot set, example 8.</p>\n\n<p>I encourage you to play around by modifying the <strong>color palette and zoom factor</strong>, for example try using the black and white color palette.</p>\n\n<p>I hope you enjoyed!.</p>\n\n<p><a href=\"https://github.com/foqc/mandelbrot-set\">Full code</a></p>\n\n<p><a href=\"https://quijosakaf.com/mandelbrot-demo\">Live demo</a></p>\n\n<p>Stay safe and thank you so much for reading!</p>\n\n","url":"https://dev.to/foqc/mandelbrot-set-in-js-zoom-in-2hmc"}}},"pageContext":{"id":"mandelbrot-set-in-js-zoom-in-2hmc"}}}