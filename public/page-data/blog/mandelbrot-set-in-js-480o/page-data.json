{"componentChunkName":"component---src-templates-blog-js","path":"/blog/mandelbrot-set-in-js-480o","result":{"data":{"devArticles":{"article":{"tags":["mandelbrot","set","javascript","fractal"],"slug":"mandelbrot-set-in-js-480o","title":"Mandelbrot Set in JS","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--Wmo21thb--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/p1h56z63ytgu17uc7s3g.png","description":"In this entry I want to share with you, a little of my knowledge to show you how to plot a Mandelbrot...","published_at":"Apr 24 2020","edited_at":"May 26 2020","positive_reactions_count":5,"comments_count":2,"body_html":"<p>In this entry I want to share with you, a little of my knowledge to show you how to plot a <strong><em><a href=\"https://en.wikipedia.org/wiki/Mandelbrot_set\">Mandelbrot Set</a></em></strong> without any library just JS, so go ahead!.</p>\n\n<p><strong>Note:</strong> If you are not familiar with the mathematical terms used here, I recommend you to read about <a href=\"https://en.wikipedia.org/wiki/Complex_number\">complex numbers</a> and <a href=\"https://en.wikipedia.org/wiki/Fractal\">fractals</a>.</p>\n\n<p>First of all, <strong><em>What a heck is a Mandelbrot Set?</em></strong>, according to <a href=\"https://mathworld.wolfram.com/MandelbrotSet.html\">mathworld</a>:</p>\n\n<p><em>A</em> <strong>Mandelbrot Set</strong>, <em>is used to refer both to a general class of <a href=\"https://en.wikipedia.org/wiki/Fractal\">fractal</a> sets and to a particular instance of such a set. In general, a Mandelbrot set marks the set of points in the complex plane such that the corresponding Julia set is connected and not computable.</em></p>\n\n<p>In a nutshell, a mandelbrot set is one of the most beautiful and famous <a href=\"https://en.wikipedia.org/wiki/Fractal\">fractal</a>, that is defined by the set of <a href=\"https://en.wikipedia.org/wiki/Complex_number\">complex numbers</a>.</p>\n\n<p>In the next picture you can see what I mean.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--71XwVvK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uymtwdcj96dku6137lau.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--71XwVvK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uymtwdcj96dku6137lau.png\" alt=\"Alt Text\" loading=\"lazy\"></a><br>\n              <strong><em>Figure 1:</em></strong> Mandelbrot set - black and white</p>\n\n<p>In this entry you will learn how to plot in JS, the previous image.</p>\n\n<p>But before, let's see a little more theory about how this set works.</p>\n<h2>\n  <a name=\"definition\" href=\"#definition\" class=\"anchor\">\n  </a>\n  Definition\n</h2>\n\n<p>As we mention before, the mandelbrot set is defined in the set of complex numbers <strong><em>c</em></strong> for which the function,<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VmzSxHuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wikimedia.org/api/rest_v1/media/math/render/svg/191627a3eebdd6608c9b226786defc468b747502\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VmzSxHuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wikimedia.org/api/rest_v1/media/math/render/svg/191627a3eebdd6608c9b226786defc468b747502\" alt=\"mandlebrot set\" loading=\"lazy\"></a><br>\ndoes not <a href=\"https://en.wikipedia.org/wiki/Stability_theory#DIVERGE\">diverge</a> when iterated from <strong><em>z = 0</em></strong>.</p>\n\n<p>Below, the previous equation is broken down:</p>\n\n<p>As you can see, the <strong><em>Mandelbrot set</em></strong> is obtained from the quadratic recursive equation where, <strong><em>z</em></strong> and <strong><em>c</em></strong> represents a complex number.</p>\n\n<p>To represent visually this set we need to find, for each point <strong><em>c</em></strong><br>\n of a part of the complex plane, if <strong><em>Zn</em></strong> is bounded. When the modulus of <strong><em>Zn</em></strong> is greater than <strong><em>2</em></strong>, means that the number does not belong to <strong><em>Mandelbrot set</em></strong>, otherwise it is part of the set. The number of iterations to reach a modulus greater than 2 can be used to determine the color to use when we are plotting.</p>\n\n<p>A complex plane can be represented in a normal 2D plane, where the <strong><em>X</em></strong> axis, will represent the real number, meanwhile the <strong><em>Y</em></strong> axis will represent the imaginary number, for instance, <strong><em>x = 3; y= 5i</em></strong>.</p>\n\n<p>For a better understanding please refer to <a href=\"https://www.youtube.com/watch?v=NGMRB4O922I\">this video</a>.</p>\n<h2>\n  <a name=\"plot-of-the-mandelbrot-set\" href=\"#plot-of-the-mandelbrot-set\" class=\"anchor\">\n  </a>\n  Plot of the Mandelbrot Set\n</h2>\n\n<p>Finally, after understand a bit of the Mandelbrot equation, it's time to implement it:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VmzSxHuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wikimedia.org/api/rest_v1/media/math/render/svg/191627a3eebdd6608c9b226786defc468b747502\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VmzSxHuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wikimedia.org/api/rest_v1/media/math/render/svg/191627a3eebdd6608c9b226786defc468b747502\" alt=\"mandlebrot set\" loading=\"lazy\"></a><br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">MAX_ITERATION</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>\n<span class=\"kd\">function</span> <span class=\"nx\">mandelbrot</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">p</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">*</span> <span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">y</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">,</span>\n            <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">+</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">y</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">sqrt</span><span class=\"p\">(</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"nx\">n</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">d</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">n</span> <span class=\"o\">&lt;</span> <span class=\"nx\">MAX_ITERATION</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">d</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<ol>\n<li>The <strong><em>mandelbrot</em></strong> function receives a complex number, it has real and imaginary part, here we are representing those components as <strong><em>x</em></strong> and <strong><em>y</em></strong>.</li>\n<li>The <strong><em>p</em></strong> variable contains the computing of the square of <strong><em>z</em></strong>, which is also a complex number, please refer to <a href=\"https://www.khanacademy.org/math/algebra2/x2ec2f6f830c9fb89:complex/x2ec2f6f830c9fb89:complex-mul/a/complex-number-operations-review\">this</a>, to understand how basic operations such as addition, subtraction and multiplication works in complex numbers. </li>\n<li>\n<strong><em>z</em></strong> is recalculated and now it contains the addition of the received complex number <strong><em>(c)</em></strong> and the previous <strong><em>z</em></strong>.</li>\n<li>\n<strong><em>d</em></strong> is the modulus of the new complex number <strong><em>(z)</em></strong>, computed before.</li>\n<li>Add one when each iteration is completed <strong><em>(n += 1)</em></strong>.</li>\n<li>The whole process is repeated while the modulus of <strong><em>z</em></strong> belongs to <strong><em>Mandelbrot set</em></strong> and the iteration number is less than <strong><em>80</em></strong>.</li>\n<li>Finally, the function returns a tuple, with the iteration number that it took to reach a modulus greater than 2, and whether the complex number passed to it, belongs to <strong><em>Mandelbrot set</em></strong>.</li>\n</ol>\n\n<p>And that's it!, we have implemented a mandelbrot equation.<br>\nNow is time to plot.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">canvas</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">myCanvas</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">getContext</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">2d</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">WIDTH</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerWidth</span>\n<span class=\"kd\">const</span> <span class=\"nx\">HEIGHT</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">width</span> <span class=\"o\">=</span> <span class=\"nx\">WIDTH</span>\n<span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"nx\">HEIGHT</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">REAL_SET</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">IMAGINARY_SET</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">colors</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">).</span><span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"p\">?</span> <span class=\"dl\">'</span><span class=\"s1\">#000</span><span class=\"dl\">'</span> <span class=\"p\">:</span> <span class=\"s2\">`#</span><span class=\"p\">${((</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nx\">toString</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">draw</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">WIDTH</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">j</span> <span class=\"o\">&lt;</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">;</span> <span class=\"nx\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">complex</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nx\">REAL_SET</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">/</span> <span class=\"nx\">WIDTH</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">REAL_SET</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"o\">-</span> <span class=\"nx\">REAL_SET</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">),</span>\n                <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">j</span> <span class=\"o\">/</span> <span class=\"nx\">HEIGHT</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"o\">-</span> <span class=\"nx\">IMAGINARY_SET</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">m</span><span class=\"p\">,</span> <span class=\"nx\">isMandelbrotSet</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">mandelbrot</span><span class=\"p\">(</span><span class=\"nx\">complex</span><span class=\"p\">)</span>\n            <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">fillStyle</span> <span class=\"o\">=</span> <span class=\"nx\">colors</span><span class=\"p\">[</span><span class=\"nx\">isMandelbrotSet</span> <span class=\"p\">?</span> <span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">m</span> <span class=\"o\">%</span> <span class=\"nx\">colors</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">fillRect</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">j</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<ol>\n<li>In the first lines, the <strong><em>canvas</em></strong> element is found and its <strong><em>context</em></strong>, then the <strong><em>window</em></strong> <strong><em>width</em></strong> and <strong><em>height</em></strong> is assigned to the canvas.</li>\n<li>\n<strong><em>REAL_SET</em></strong> constant represent the real numbers of <strong><em>Mandlebrot set</em></strong>, as you saw the <strong><em>Figure 1</em></strong> of this entry, the domain in <strong><em>x axis</em></strong> goes from <strong><em>-2</em></strong> to <strong><em>1</em></strong>.</li>\n<li>\n<strong><em>IMAGINARY_SET</em></strong> represent, the imaginary numbers in <strong><em>y axis</em></strong>, the domain in <strong><em>y axis</em></strong> goes from <strong><em>-1</em></strong> to <strong><em>1</em></strong>.</li>\n<li>\n<strong><em>colors</em></strong>, store a list of <strong><em>16</em></strong> random hexadecimal colors.</li>\n<li>\n<strong><em>draw</em></strong> function:\n\n<ul>\n<li>The entire <strong><em>width</em></strong> and <strong><em>height</em></strong> of the canvas are iterated.</li>\n<li>The <strong><em>\"complex\"</em></strong> variable store a complex number; <strong><em>x</em></strong> and <strong><em>y</em></strong>, are calculated getting a relative value, of the width and height of the canvas, plus the values ​​that belong to the <em>mandelbrot set</em>.</li>\n<li>\n<strong><em>mandelbrot</em></strong> function is called</li>\n<li>A color is assigned to canvas pixel, if the complex number passed to <strong><em>mandelbrot</em></strong> function belongs to set, the black color is chosen, otherwise the color depends of the number of iteration made by <strong><em>mandelbrot function</em></strong>.</li>\n<li>A pixel (rectangle of 1 width and height) is plotted  in the position <strong><em>i, j</em></strong>.</li>\n</ul>\n</li>\n</ol>\n\n<p>That's all, we've finished, it was so easy! isn't it?</p>\n\n<p>If we run the code, it shows the next figures.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cAre966z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zp9dc62mc75gp774dhzy.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cAre966z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zp9dc62mc75gp774dhzy.png\" alt=\"Alt Text\" loading=\"lazy\"></a><br>\n<strong><em>Figure 2.</em></strong> Mandelbrot set, example 1.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XNKmxX3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p7wtllt2rjco6i8cjr57.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XNKmxX3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p7wtllt2rjco6i8cjr57.png\" alt=\"Alt Text\" loading=\"lazy\"></a><br>\n<strong><em>Figure 3.</em></strong> Mandelbrot set, example 2.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yVreYbXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s1m3aiugtoxyr38b3fi7.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yVreYbXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s1m3aiugtoxyr38b3fi7.png\" alt=\"Alt Text\" loading=\"lazy\"></a><br>\n<strong><em>Figure 4.</em></strong> Mandelbrot set, example 3.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aMdXNx7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0jbpzgmea0jfrb1sysaa.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aMdXNx7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0jbpzgmea0jfrb1sysaa.png\" alt=\"Alt Text\" loading=\"lazy\"></a><br>\n<strong><em>Figure 5.</em></strong> Mandelbrot set, example 4.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QoaxoTGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ys0k6qprgl4holy0r00w.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QoaxoTGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ys0k6qprgl4holy0r00w.png\" alt=\"Alt Text\" loading=\"lazy\"></a><br>\n<strong><em>Figure 6.</em></strong> Mandelbrot set, example 5.</p>\n\n<p>I hope you've enjoyed!.</p>\n\n<p><a href=\"https://jsbin.com/ruhuxefabo/1/edit?js,output\">Live demo</a><br>\n<a href=\"https://github.com/foqc/mandelbrot-set\">Full code</a></p>\n\n<p>By the way, It's my first blog, written entirely in English (I'm not a native speaker), maybe you've already realized, so sorry for the misspellings!, please If you have any recommendation, or comment you can leave in the comments section.</p>\n\n<h2>\n  <a name=\"next-steps\" href=\"#next-steps\" class=\"anchor\">\n  </a>\n  Next steps\n</h2>\n\n<p>Our fractal is plotted, so in the <a href=\"https://dev.to/foqc/mandelbrot-set-in-js-zoom-in-2hmc\">next entry</a> I will implement the <strong>zoom</strong>, when a part of the image is clicked.</p>\n\n<p>Stay safe and thanks for reading!</p>\n\n","url":"https://dev.to/foqc/mandelbrot-set-in-js-480o"}}},"pageContext":{"id":"mandelbrot-set-in-js-480o"}}}