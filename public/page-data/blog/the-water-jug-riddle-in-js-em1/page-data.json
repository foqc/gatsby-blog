{"componentChunkName":"component---src-templates-blog-js","path":"/blog/the-water-jug-riddle-in-js-em1","result":{"data":{"devArticles":{"article":{"tags":["riddle","javascript","shortestpath","BFS"],"slug":"the-water-jug-riddle-in-js-em1","title":"The Water Jug Riddle in JS","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--4PNsMMPL--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/3bvs41ojx8kj8ycgvud0.jpg","description":"In this entry I want to share you, how to solve the water jug riddle using Javascript, by the way a c...","published_at":"May 01 2020","edited_at":"May 02 2020","positive_reactions_count":6,"comments_count":2,"body_html":"<p>In this entry I want to share you, <strong>how to solve the water jug riddle using Javascript</strong>, by the way a curious fact, this problem is featured in the film <strong><a href=\"https://www.youtube.com/watch?v=6cAbgAaEOVE\">Die Hard</a></strong>. So, the riddle is:</p>\n\n<p>You have <strong>2 jugs</strong>, <strong>5</strong> and <strong>3 liters of capacity</strong> respectively, without any measurement mark, in addition you have an unlimited water source that allows you to fill the jugs with water. Exactly 4 liters of water is required in one of the jugs.</p>\n\n<p><strong>Note:</strong> The same problem is explained in <a href=\"https://dev.to/foqc/prolog-acertijo-jarras-de-agua-2b33\">this entry</a> and is implemented in <strong>Prolog</strong>  (Spoiler: is in spanish).</p>\n\n<p>First of all, we should answer the following question, <strong>How would we solve this manually?</strong></p>\n\n<p>In order to measure the 4 liters required, a set of steps must be executed, we suppose that, the <strong>initial state</strong> is <strong>0</strong> liters of water in the large and small jug.</p>\n\n<p><strong>1.</strong> First, fill the large jug.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uIdLtguR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xjc4os2jkau1xyhycmfs.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uIdLtguR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xjc4os2jkau1xyhycmfs.png\" alt=\"fill large\" loading=\"lazy\"></a></p>\n\n<p><strong>2.</strong> Once the 5-liter jug ​​is full, pour the content of the large jug into the small one, resulting in 2 and 3 liters of water; now the small jug is full.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PtCrwIFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ad31kqqxopf8i0z4z0yb.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PtCrwIFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ad31kqqxopf8i0z4z0yb.png\" alt=\"fill small\" loading=\"lazy\"></a></p>\n\n<p><strong>3.</strong> Empty the small jug.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7SktMYDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f0uuw70qlua3f6blmoxh.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7SktMYDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f0uuw70qlua3f6blmoxh.png\" alt=\"fill large\" loading=\"lazy\"></a></p>\n\n<p><strong>4.</strong> Pour the contents of the large jug into the small jug. The large jug contains 0 liters of water and 2 liters the small jug.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xRjbXQ3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/483nc0ymffz50tk00cu8.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xRjbXQ3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/483nc0ymffz50tk00cu8.png\" alt=\"fill large\" loading=\"lazy\"></a></p>\n\n<p><strong>5.</strong> Fill the large jug, again.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4QKXr-kP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1zjwq1fpex9zjvlnxhws.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4QKXr-kP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1zjwq1fpex9zjvlnxhws.png\" alt=\"fill small\" loading=\"lazy\"></a></p>\n\n<p><strong>6.</strong> Pour the content of the large jug into the small one where there is <strong>2 lt</strong> of water. Since it only takes one liter to fill the small jug and the large jug contains <strong>5 lt</strong> of water. As you pass from the large jug into the small jug, <strong>4 liters</strong> of water results in the large jug.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aVIlWMN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0tpx723opp8yam5wst4v.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aVIlWMN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0tpx723opp8yam5wst4v.png\" alt=\"Fill small final\" loading=\"lazy\"></a></p>\n\n<p>Finally, in this step the problem has been solved in <strong>6 steps</strong>, it should be mentioned that this <strong>is not the unique solution</strong>, since there are more, for example, you can start by filling the small jug (3lt).</p>\n<h2>\n  <a name=\"implementation-in-js\" href=\"#implementation-in-js\" class=\"anchor\">\n  </a>\n  Implementation in JS\n</h2>\n\n<p>To represent each state of the jugs, I'm going to use an object, it has two properties, <strong>small</strong> and <strong>large</strong>, of type integer.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">small</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"na\">large</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>In the following code, 4 functions are written to modify the jugs states.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">MAX_LARGE</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"kd\">const</span> <span class=\"nx\">MAX_SMALL</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">fillJug</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">jugs</span><span class=\"p\">,</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">large</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">MAX_LARGE</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">jugs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]:</span> <span class=\"nx\">max</span> <span class=\"p\">})</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">emptyJug</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">jugs</span><span class=\"p\">,</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">large</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">jugs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]:</span> <span class=\"mi\">0</span> <span class=\"p\">})</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">largeToSmall</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">large</span><span class=\"p\">,</span> <span class=\"nx\">small</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">quantityNeededToFillSmall</span> <span class=\"o\">=</span> <span class=\"nx\">MAX_SMALL</span> <span class=\"o\">-</span> <span class=\"nx\">small</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">large</span><span class=\"p\">:</span> <span class=\"nx\">large</span> <span class=\"o\">&gt;</span> <span class=\"nx\">quantityNeededToFillSmall</span>\n            <span class=\"p\">?</span> <span class=\"nx\">large</span> <span class=\"o\">-</span> <span class=\"nx\">quantityNeededToFillSmall</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"na\">small</span><span class=\"p\">:</span> <span class=\"nx\">large</span> <span class=\"o\">&gt;</span> <span class=\"nx\">quantityNeededToFillSmall</span>\n            <span class=\"p\">?</span> <span class=\"nx\">small</span> <span class=\"o\">+</span> <span class=\"nx\">quantityNeededToFillSmall</span> <span class=\"p\">:</span> <span class=\"nx\">small</span> <span class=\"o\">+</span> <span class=\"nx\">large</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">smallToLarge</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">large</span><span class=\"p\">,</span> <span class=\"nx\">small</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">quantityNeededToFillLarge</span> <span class=\"o\">=</span> <span class=\"nx\">MAX_LARGE</span> <span class=\"o\">-</span> <span class=\"nx\">large</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">large</span><span class=\"p\">:</span> <span class=\"nx\">small</span> <span class=\"o\">&gt;</span> <span class=\"nx\">quantityNeededToFillLarge</span>\n            <span class=\"p\">?</span> <span class=\"nx\">small</span> <span class=\"o\">-</span> <span class=\"nx\">quantityNeededToFillLarge</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"na\">small</span><span class=\"p\">:</span> <span class=\"nx\">small</span> <span class=\"o\">&gt;</span> <span class=\"nx\">quantityNeededToFillLarge</span>\n            <span class=\"p\">?</span> <span class=\"nx\">large</span> <span class=\"o\">+</span> <span class=\"nx\">quantityNeededToFillLarge</span> <span class=\"p\">:</span> <span class=\"nx\">small</span> <span class=\"o\">+</span> <span class=\"nx\">large</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">isRepeated</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">small</span><span class=\"p\">,</span> <span class=\"nx\">large</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span>\n    <span class=\"o\">!!</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">small</span> <span class=\"o\">===</span> <span class=\"nx\">small</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">large</span> <span class=\"o\">===</span> <span class=\"nx\">large</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n\n<p>The first 2 lines are constants to define the maximum capacity of jugs.</p>\n\n<ul>\n<li>\n<strong>fillJug</strong>, this function will modify the jugs state, filling one of them by its key, both jugs and key are passed as parameters, refer to explanation <strong>1 and 5</strong> of this entry.</li>\n<li>\n<strong>emptyJug</strong>, it'll empty a jug, put state in 0, small or the large one, as point <strong>3</strong> of the previous explanation.</li>\n<li>\n<strong>largeToSmall</strong>, pour the content of the large jug into the small one.\n\n<ul>\n<li>\n<strong>quantityNeededToFillSmall</strong>, is self explanatory.</li>\n<li>\n<strong>large</strong>, if the quantity of water in the large jug is greater than quantity needed to fill the small one, subtract the quantity of water from the large jug and the quantity needed to fill the small one (<strong>large - quantityNeededToFillSmall</strong>), it means not all the content of the large jug will be poured into the small one. Otherwise, it'll be <strong>zero</strong>, because it means that all the content of the large jug are poured into the small one.</li>\n<li>\n<strong>small</strong>, if the quantity of water in the large jug is greater than quantity needed to fill the small one means, the small jug doesn't have the capacity to store all the content of the large jug, so is added just the quantity of the small jug and the quantity needed to fill it (<strong>small + quantityNeededToFillSmall</strong>). Otherwise, all of the content from the large jug will be poured into the small one (<strong>small + large</strong>).</li>\n</ul>\n\n\n</li>\n<li>\n<strong>smallToLarge</strong>, pour the content of the small jug into the large one. The rest is similar to the previous explanation, but in reverse.</li>\n<li>\n<strong>isRepeated</strong>, will check if the new state already exists in path.</li>\n</ul>\n\n<p>To find the path to the solution, <strong>Breadth-First Search (BFS)</strong> is proposed, because is the most efficient algorithm to find the shortest path, this algorithm begins from the root and goes through each node by levels instead of branches as <strong>Deep-First Search (DFS)</strong> does, using a <strong>queue</strong> to temporarily store nodes.</p>\n\n<p><strong>BFS</strong> is implemented to find the shortest path.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">getShortestPath</span><span class=\"p\">(</span><span class=\"nx\">start</span><span class=\"p\">,</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">queue</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">start</span><span class=\"p\">)</span>\n    <span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">lastPath</span> <span class=\"o\">=</span> <span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">()</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">lastState</span> <span class=\"o\">=</span> <span class=\"nx\">lastPath</span><span class=\"p\">[</span><span class=\"nx\">lastPath</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"nx\">lastState</span><span class=\"p\">.</span><span class=\"nx\">large</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"nx\">lastPath</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">states</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Set</span><span class=\"p\">([</span><span class=\"nx\">fillJug</span><span class=\"p\">(</span><span class=\"nx\">lastState</span><span class=\"p\">),</span> <span class=\"nx\">fillJug</span><span class=\"p\">(</span><span class=\"nx\">lastState</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">small</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">MAX_SMALL</span><span class=\"p\">),</span>\n        <span class=\"nx\">largeToSmall</span><span class=\"p\">(</span><span class=\"nx\">lastState</span><span class=\"p\">),</span> <span class=\"nx\">smallToLarge</span><span class=\"p\">(</span><span class=\"nx\">lastState</span><span class=\"p\">),</span> <span class=\"nx\">emptyJug</span><span class=\"p\">(</span><span class=\"nx\">lastState</span><span class=\"p\">),</span> <span class=\"nx\">emptyJug</span><span class=\"p\">(</span><span class=\"nx\">lastState</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">small</span><span class=\"dl\">'</span><span class=\"p\">)])</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">item</span> <span class=\"k\">of</span> <span class=\"nx\">states</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isRepeated</span><span class=\"p\">(</span><span class=\"nx\">lastPath</span><span class=\"p\">,</span> <span class=\"nx\">item</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">newPath</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">lastPath</span><span class=\"p\">]</span>\n                <span class=\"nx\">newPath</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span>\n                <span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">newPath</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"kc\">null</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">getShortestPath</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n\n<ul>\n<li>\n<strong>getShortestPath</strong>, receives two parameters, the first one is the initial state of the jugs, and the second one is the final quantity needed.</li>\n<li>Declare an <strong>array</strong> (<strong>queue</strong>), which <strong>will be used</strong> as a <strong>queue</strong> to store the shortest path.</li>\n<li>Declare an <strong>array</strong> (<strong>path</strong>), to store the selected states.</li>\n<li>Add the <strong>initial state</strong> as the first element of the <strong>path</strong> array, <strong><em>path.push(start)</em></strong>, then this path is added to the <strong>queue</strong>.</li>\n<li>\n<strong>While</strong> data exists in the <strong>queue</strong>, <strong>while(queue.length)</strong>, the following instructions are executed.\n\n<ul>\n<li>The first element of the queue is removed (<strong>queue.shift()</strong>), and stored in <strong>lastPath</strong> variable.</li>\n<li>The <strong>last state</strong> is selected from the <strong>last path</strong> array (<strong>lastState = lastPath[lastPath.length - 1]</strong>).</li>\n<li>If the quantity in the large jug (<strong>last state</strong>) selected is equal to target value that you are looking for, it returns the list of obtained state (shortest path) (<strong>return lastPath</strong>). Otherwise it'll continue.</li>\n<li>We add the <strong>possible states</strong> that can be <strong>generated</strong> from the last one, to a <strong>Set data structure</strong>.</li>\n<li>For each state obtained in the previous step, the next instructions are executed.</li>\n<li>It's reviewed that the generated state isn't yet included in the path (solution path).</li>\n<li>In case the previous condition is met, create a new list (new path) with the states of the last path.</li>\n<li>In this new path is added the <strong>new state</strong> of the jugs (<strong>newPath.push(item)</strong>), afterwards the <strong>new path</strong> is added to <strong>queue</strong>.</li>\n</ul>\n\n\n</li>\n<li>Finally, if during the repetitive cycle the target state is not found, it returns null.</li>\n</ul>\n\n<p>When executing the previous code, the following is printed in console.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">getShortestPath</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"se\">\\t</span><span class=\"dl\">'</span><span class=\"p\">))</span>\n<span class=\"c1\">// console output</span>\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n\n\n\n<p>I hope you've enjoyed!.</p>\n\n<p><a href=\"https://github.com/foqc/WaterJugRiddleJS\">Full Code</a></p>\n\n<p>It's my second blog, written entirely in English (I'm not a native speaker), maybe you've already realized, so sorry for the misspellings!, please If you have any recommendation, or comment you can leave in the comments section.</p>\n\n<p>Stay safe and thanks for reading!</p>\n\n","url":"https://dev.to/foqc/the-water-jug-riddle-in-js-em1"}}},"pageContext":{"id":"the-water-jug-riddle-in-js-em1"}}}