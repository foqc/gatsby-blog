{"componentChunkName":"component---src-templates-blog-js","path":"/blog/plotting-a-binary-tree-in-javascript-47hc","result":{"data":{"devArticles":{"article":{"tags":["three","javascript","bfs","dfs"],"slug":"plotting-a-binary-tree-in-javascript-47hc","title":"Plotting a binary tree in JavaScript","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--FkWd78Eh--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/uqa5el7nyx26cxgpgeyw.png","description":"A tree in computer science is a data structure that has a wide use in the field of computer science,...","published_at":"Sep 24 2020","edited_at":null,"positive_reactions_count":0,"comments_count":0,"body_html":"<p>A tree in computer science is a data structure that has a wide use in the field of computer science, it has a root, a sub-tree of children with a parent node, represented as a set of linked nodes. This data structure has extensive use cases, trees are the basis of other data structures such as Maps and Sets, in addition to a clear example of the use of trees are fast searches in databases and representing the HTML DOM hierarchy. There are different types of trees, however in this post we will implement and graph a binary tree using <strong>Canvas</strong> and <strong>JavaScript</strong>.</p>\n\n<h2>\n  <a name=\"what-is-a-binary-tree\" href=\"#what-is-a-binary-tree\" class=\"anchor\">\n  </a>\n  What is a binary tree?\n</h2>\n\n<p>A binary tree is a data structure, it begins with a top node called <strong>root</strong> and <strong>branches</strong> with its descendants (sub-trees) until it finally ends at nodes called leaves. Each node can have a maximum of 2 children, <strong>left and right</strong>. In case that node does not have any reference, it means it does not have children, it is called <strong>leaves or external node</strong>.</p>\n\n<h2>\n  <a name=\"implementing-the-binary-tree-data-structure\" href=\"#implementing-the-binary-tree-data-structure\" class=\"anchor\">\n  </a>\n  Implementing the binary tree data structure\n</h2>\n\n<p>In the previous blog you realized that a binary tree is a data structure, where each node has a value and pointers (links) to 2 children or descendants, below is the implementation of a node.<br>\n<strong>Note:</strong> It is assumed that the reader has knowledge of the tree data structure, so the explanation of its implementation will not be deepened.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">LEFT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">const</span> <span class=\"nx\">RIGHT</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">value</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">children</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pos</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">,</span> <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">r</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">left</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">[</span><span class=\"nx\">LEFT</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n\n    <span class=\"kd\">set</span> <span class=\"nx\">left</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"k\">this</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">[</span><span class=\"nx\">LEFT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">right</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">[</span><span class=\"nx\">RIGHT</span><span class=\"p\">]}</span>\n\n    <span class=\"kd\">set</span> <span class=\"nx\">right</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"k\">this</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">[</span><span class=\"nx\">RIGHT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">set</span> <span class=\"nx\">position</span><span class=\"p\">(</span><span class=\"nx\">position</span><span class=\"p\">){</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pos</span> <span class=\"o\">=</span> <span class=\"nx\">position</span> <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">position</span><span class=\"p\">(){</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pos</span> <span class=\"p\">}</span>\n\n    <span class=\"kd\">get</span> <span class=\"nx\">radius</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">r</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>Well, now that we have the node class, we are going to implement the Tree class, which allows inserting the child nodes, their value and position.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">class</span> <span class=\"nx\">Tree</span><span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(){</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startPosition</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">}</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">axisX</span> <span class=\"o\">=</span> <span class=\"mi\">350</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">axisY</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getPosition</span><span class=\"p\">({</span><span class=\"nx\">x</span> <span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">},</span> <span class=\"nx\">isLeft</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">){</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nx\">isLeft</span> <span class=\"p\">?</span> <span class=\"nx\">x</span> <span class=\"o\">-</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">axisX</span> <span class=\"o\">+</span> <span class=\"nx\">y</span> <span class=\"p\">:</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">axisX</span> <span class=\"o\">-</span> <span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"nx\">y</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">axisY</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">){</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Node</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">){</span>\n            <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">position</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startPosition</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">root</span>\n                <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">){</span>\n                    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">==</span> <span class=\"nx\">value</span><span class=\"p\">)</span>\n                        <span class=\"k\">break</span>\n                    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">&gt;</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">){</span>\n                        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">){</span>\n                            <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">position</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getPosition</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">position</span><span class=\"p\">)</span> <span class=\"c1\">//get current position of new node</span>\n                            <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">right</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span> \n                            <span class=\"k\">break</span>\n                         <span class=\"p\">}</span>\n                         <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">right</span>\n                     <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                         <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">){</span>\n                             <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">position</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getPosition</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">position</span><span class=\"p\">,</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"c1\">//get current position of new node</span>\n                             <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span>\n                             <span class=\"k\">break</span>\n                         <span class=\"p\">}</span>\n                         <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">left</span>\n                     <span class=\"p\">}</span>\n               <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// bfs(){ ... } it will be implemented later</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>In the Tree class, 4 attributes are initialized in the constructor, which are:</p>\n\n<ol>\n<li>\n<strong>root</strong> attribute refers to the root node of the tree.</li>\n<li>\n<strong>startPosition</strong> is an attribute used to determine the position on the abscissa <strong>axis or X</strong> axis and its ordinate or <strong>Y axis</strong>, of the root node.</li>\n<li>\n<strong>axisX and axisY</strong>, are numerical constants that allow the nodes to be moved graphically in the plane.</li>\n<li>The <strong>add method</strong> of the Tree class allows inserting a new node in the tree, the position of the node is changed depending on whether it is a <strong>left or right</strong> node.</li>\n<li>\n<strong>getPosition</strong> method receives the <strong>X and Y position</strong> as an argument, <strong>isLeft flag</strong> by default is false, this method allows to calculate the new position in plane of the new node. The constant <strong>axisX</strong> is added or subtracted from the X axis together with the position in Y, since in this axis less and less distance will move between nodes, while the depth of the tree is greater. On the other hand, the Y axis only adds the constant <strong>axisY</strong>, because the distance between the nodes on this axis will always be the same.</li>\n</ol>\n\n<h2>\n  <a name=\"breadth-first-search\" href=\"#breadth-first-search\" class=\"anchor\">\n  </a>\n  Breadth First Search\n</h2>\n\n<p>To graph the binary tree in the plane, it is necessary to go through each node of the tree, for this there are 2 possibilities:</p>\n\n<ul>\n<li>The first is the <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">Depth First Search - DFS</a>, which starts <strong>from the root and expands each of the nodes to the end nodes or leaves</strong>, for each of the branches, using a <strong>stack</strong> to temporarily store the nodes while traveling .</li>\n<li>The second option is the <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">Breadth First Search - BFS</a>, which starts <strong>from the root and traverses each node through levels instead of branches</strong>, using a <strong>queue</strong> to temporarily store nodes.</li>\n</ul>\n\n<p>To graph the tree, I have decided to use the BFS since I prefer to graph the nodes by levels, it is true that when it is required to visit all the nodes of the tree it is better to use DFS since the search by width is efficient in finding the shortest path, however in this case tastes and preferences are far from being technical.</p>\n\n<h2>\n  <a name=\"it-is-time-to-graph-the-tree-by-implementing-bfs\" href=\"#it-is-time-to-graph-the-tree-by-implementing-bfs\" class=\"anchor\">\n  </a>\n  It is time to graph the tree by implementing BFS\n</h2>\n\n\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">myCanvas</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">getContext</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2d</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n<span class=\"nx\">bfs</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">queue</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">black</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">#000</span><span class=\"dl\">\"</span>\n    <span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">root</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">!==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">()</span>\n        <span class=\"kd\">const</span> <span class=\"p\">{</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">position</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">#</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">24</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"mi\">0</span> <span class=\"p\">).</span><span class=\"nx\">toString</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">beginPath</span><span class=\"p\">()</span>\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">strokeStyle</span> <span class=\"o\">=</span> <span class=\"nx\">black</span>\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">fillStyle</span> <span class=\"o\">=</span> <span class=\"nx\">color</span>\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">fill</span><span class=\"p\">()</span>\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">stroke</span><span class=\"p\">()</span>\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">strokeStyle</span> <span class=\"o\">=</span> <span class=\"nx\">black</span>\n        <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">strokeText</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span>\n\n        <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">child</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"p\">{</span><span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nx\">x1</span><span class=\"p\">,</span> <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"nx\">y1</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">position</span>\n            <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">beginPath</span><span class=\"p\">();</span>\n            <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">moveTo</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span> <span class=\"o\">+</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">radius</span><span class=\"p\">)</span>\n            <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">lineTo</span><span class=\"p\">(</span><span class=\"nx\">x1</span><span class=\"p\">,</span> <span class=\"nx\">y1</span> <span class=\"o\">-</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">radius</span><span class=\"p\">)</span>\n            <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">stroke</span><span class=\"p\">()</span>\n            <span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>The above algorithm is detailed below:</p>\n\n<ol>\n<li>Create a <strong>queue</strong> variable, in javascript an array serves this purpose, <strong>const queue = []</strong>.</li>\n<li>Insert <strong>root</strong> of the tree, <strong>queue.push(this.root)</strong>, into the queue.</li>\n<li>As long as the queue has nodes, the following is done.</li>\n<li>Remove the first item from the <strong>queue</strong> and return the item removed const <strong>node = queue.shift()</strong>.</li>\n<li>Get the position of the deleted node <strong>const {x, y} = node.position</strong>, also the following line, calculates a color randomly.</li>\n<li>Start a new route by emptying the list of sub-routes, since it is required to create a new route to plot the circumference, <strong>ctx.beginPath()</strong>.</li>\n<li>Determine the color of the line, a black color in this case, <strong>ctx.strokeStyle = black</strong>, and also determine the fill color, <strong>ctx.fillStyle = color</strong>.</li>\n<li>\n<strong>Draw a circle</strong>, you have to draw an arc of <strong>360 degrees</strong>, that is, <strong>2π radians</strong>, for this we use the method <strong>ctx.arc(x, y, node.radius, 0, 2 * Math.PI)</strong>, where X and Y is the center of the circumference, the next parameter is the <strong>radius</strong>, the <strong>0</strong> represents the starting angle and the last represents the final angle in radians.</li>\n<li>Draw the previously defined line <strong>ctx.stroke()</strong>, and assign the black line again, <strong>ctx.strokeStyle = black</strong>.</li>\n<li>Write the value of the node <strong>ctx.strokeText(node.value, x, y)</strong>, in the same position on the circumference.</li>\n<li>For each child node that the parent node has <strong>(node.children.forEach)</strong> the following is done:</li>\n<li>Gets the position of the child node <strong>const {x: x1, y: y1} = child.position</strong>.</li>\n<li>Draw a line from the parent node <strong>(ctx.moveTo (x, y + child.radius))</strong>, to the child node <strong>(ctx.lineTo (x1, y1 - child.radius))</strong> joining the edges of each circumference.</li>\n<li>Add the child node to the <strong>queue.push(child)</strong>.</li>\n</ol>\n\n<p>Ready!. The method to graph the tree is implemented, it is time to put into operation the insert and graph methods of the tree class.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Tree</span><span class=\"p\">()</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">bfs</span><span class=\"p\">()</span>\n</code></pre></div>\n\n\n\n<p>The result of the execution of the previous code will be the following.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3K01WF38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/utfgf922d6ftha6eenga.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3K01WF38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/utfgf922d6ftha6eenga.png\" alt=\"Alt Text\" loading=\"lazy\"></a></p>\n\n<p>This source code can be found on <a href=\"https://github.com/foqc/bfs-canvas-tree\">GitHub</a>.</p>\n\n<p>Was it useful? Show your support or share it!</p>\n\n<p><strong>Thank you!!</strong></p>\n\n","url":"https://dev.to/foqc/plotting-a-binary-tree-in-javascript-47hc"}}},"pageContext":{"id":"plotting-a-binary-tree-in-javascript-47hc"}}}