{"version":3,"sources":["webpack:///./src/assets/demo/mandelbrot.js","webpack:///./src/pages/mandelbrot-demo.js","webpack:///./src/assets/demo/worker.js"],"names":["worker","canvas","ctx","colorPalette","REAL_SET","start","end","IMAGINARY_SET","TASKS","makeRGB","r","g","b","k","calculate","pair","parseInt","x","X1","Y1","X2","isNaN","draw","res","length","postMessage","col","shift","data","mandelbrotSets","i","m","c","fillStyle","fillRect","Mandelbrot","myCanvas","getContext","width","height","startListeners","terminate","Worker","worker_script","w","h","realSet","imaginarySet","isSettingUp","size","range","colors","push","palette","onmessage","addEventListener","e","getRelativePoint","pageX","offsetLeft","WIDTH","pageY","offsetTop","HEIGHT","pixel","set","Demo","componentDidMount","this","refs","render","title","loadDemoImage","description","ref","className","React","Component","code","END_START_RL","END_START_IM","row","j","mandelbrot","relativePoint","y","p","d","z","n","Math","pow","toString","substring","indexOf","lastIndexOf","blob","Blob","type","URL","createObjectURL","module","exports"],"mappings":"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","file":"component---src-pages-mandelbrot-demo-js-f18ef20807458c4cb755.js","sourcesContent":["/**\n *  autor: foqc\n *  github: foqc\n */\n// noprotect\nimport worker_script from '../demo/worker';\nlet WIDTH = 800\nlet HEIGHT = 600\n\nlet worker, canvas, ctx\nlet colorPalette = []\nlet REAL_SET = { start: -2, end: 1 }\nlet IMAGINARY_SET = { start: -1, end: 1 }\nconst ZOOM_FACTOR = 0.1\nconst TASKS = []\n\nconst lagrange = ([X1, Y1], [X2, Y2], x) => (((Y1 * (x - X2)) / (X1 - X2)) + ((Y2 * (x - X1)) / (X2 - X1)))\n\nconst makeRGB = (r, g, b, k) => {\n    const calculate = pair => parseInt(lagrange(pair[0], pair[1], k))\n    if (isNaN(r)) r = calculate(r)\n    if (isNaN(g)) g = calculate(g)\n    if (isNaN(b)) b = calculate(b)\n\n    return [r, g, b]\n}\n\n/**\n * get 250 colors from  interpolation (between 6 colors):\n * rgb(255, 0, 0) -> rgb(255, 255, 0) -> rgb(0, 255, 0)\n * rgb(0,255,255) -> rgb(0, 0, 255) -> rgb(255, 0, 255)\n */\nconst palette = (size = 250) => {\n    const range = parseInt(size / 6)\n    const colors = []\n    let c\n    for (let k = 0; k < size; k++) {\n        if (k <= range)//red to yellow\n            c = makeRGB(255, [[0, 0], [range, 255]], 0, k)\n        else if (k <= range * 2)//yellow to green\n            c = makeRGB([[range + 1, 255], [range * 2, 0]], 255, 0, k)\n        else if (k <= range * 3)//green to cyan\n            c = makeRGB(0, 255, [[range * 2 + 1, 0], [range * 3, 255]], k)\n        else if (k <= range * 4)//cyan to blue\n            c = makeRGB(0, [[range * 3 + 1, 255], [range * 4, 0]], 255, k)\n        else if (k <= range * 5)//blue to purple\n            c = makeRGB([[range * 4 + 1, 0], [range * 5, 255]], 0, 255, k)\n        else//purple to red\n            c = makeRGB(255, 0, [[range * 5 + 1, 255], [size - 1, 0]], k)\n\n        colors.push(c)\n    }\n    return colors\n}\n\nconst start = () => {\n    for (let col = 0; col < WIDTH; col++) TASKS[col] = col\n    worker.postMessage({ col: TASKS.shift() })\n}\n\nconst draw = (res) => {\n    if (TASKS.length > 0)\n        worker.postMessage({ col: TASKS.shift() })\n\n    const { col, mandelbrotSets } = res.data\n    for (let i = 0; i < HEIGHT; i++) {\n        const [m, isMandelbrotSet] = mandelbrotSets[i]\n        const c = isMandelbrotSet ? [0, 0, 0] : colorPalette[m % (colorPalette.length - 1)]\n        ctx.fillStyle = `rgb(${c[0]}, ${c[1]}, ${c[2]})`\n        ctx.fillRect(col, i, 1, 1)\n    }\n}\n\nconst Mandelbrot = (myCanvas) => {\n    if (myCanvas) {\n        canvas = myCanvas\n        ctx = canvas.getContext('2d')\n        ctx.canvas.width = WIDTH\n        ctx.canvas.height = HEIGHT\n        startListeners()\n    }\n\n    if (worker) worker.terminate()\n    worker = new Worker(worker_script)\n    worker.postMessage({ w: WIDTH, h: HEIGHT, realSet: REAL_SET, imaginarySet: IMAGINARY_SET, isSettingUp: true })\n    start()\n    colorPalette = palette()\n    worker.onmessage = draw\n}\n\nconst startListeners = () => canvas.addEventListener('click', e => {\n    const zfw = (WIDTH * ZOOM_FACTOR)\n    const zfh = (HEIGHT * ZOOM_FACTOR)\n\n    REAL_SET = {\n        start: getRelativePoint(e.pageX - canvas.offsetLeft - zfw, WIDTH, REAL_SET),\n        end: getRelativePoint(e.pageX - canvas.offsetLeft + zfw, WIDTH, REAL_SET)\n    }\n    IMAGINARY_SET = {\n        start: getRelativePoint(e.pageY - canvas.offsetTop - zfh, HEIGHT, IMAGINARY_SET),\n        end: getRelativePoint(e.pageY - canvas.offsetTop + zfh, HEIGHT, IMAGINARY_SET)\n    }\n\n    Mandelbrot()\n})\n\nconst getRelativePoint = (pixel, length, set) => set.start + (pixel / length) * (set.end - set.start)\n\nexport default Mandelbrot;","import React from \"react\"\nimport Layout from '../components/layout'\nimport Mandelbrot from '../assets/demo/mandelbrot'\nimport SEO from '../components/seo'\n\nclass Demo extends React.Component {\n    componentDidMount() {\n        const canvas = this.refs.canvas\n        Mandelbrot(canvas)\n    }\n    render() {\n        return (\n            <Layout>\n                <SEO title={'Mandelbrot Demo'}\n                    loadDemoImage={true}\n                    description={'In this demo a menadelbrot set is implemented and plotted using Canvas and JavaScript...'} />\n                <h1>Mandelbrot Demostration</h1>\n                <p>The Mandelbrot set has become popular outside mathematics both for its aesthetic appeal and as an example of a complex\n                structure arising from the application of simple rules. It is one of the best-known examples of mathematical visualization\n                and mathematical beauty.</p>\n                <p>\n                    In this demo a menadelbrot set is implemented and plotted using Canvas and JavaScript.\n                </p>\n                <em>Click on a specific point in the image to zoom in</em>\n\n                <canvas ref=\"canvas\" className=\"canvas-mandelbrot\" />\n            </Layout>\n        )\n    }\n}\nexport default Demo","const workercode = () => {\n    let WIDTH, HEIGHT, REAL_SET, IMAGINARY_SET, END_START_RL, END_START_IM\n    const MAX_ITERATION = 1000\n    onmessage = (e) => {\n        const { isSettingUp } = e.data\n        if (isSettingUp) {\n            const { w, h, realSet, imaginarySet } = e.data\n\n            REAL_SET = { start: realSet.start, end: realSet.end }\n            IMAGINARY_SET = { start: imaginarySet.start, end: imaginarySet.end }\n\n            END_START_RL = (REAL_SET.end - REAL_SET.start)\n            END_START_IM = (IMAGINARY_SET.end - IMAGINARY_SET.start)\n\n            WIDTH = w\n            HEIGHT = h\n        } else {\n            const { col } = e.data\n            const mandelbrotSets = []\n            for (let row = 0; row < HEIGHT; row++)\n                mandelbrotSets[row] = calculate(col, row)\n\n            postMessage({ col, mandelbrotSets })\n        }\n    }\n    const calculate = (i, j) => mandelbrot(relativePoint(i, j))\n\n    const relativePoint = (x, y) => {\n        x = REAL_SET.start + (x / WIDTH) * (END_START_RL)\n        y = IMAGINARY_SET.start + (y / HEIGHT) * (END_START_IM)\n\n        return { x, y }\n    }\n\n    const mandelbrot = (c) => {\n        let z = { x: 0, y: 0 }, n = 0, p, d;\n        do {\n            p = {\n                x: Math.pow(z.x, 2) - Math.pow(z.y, 2),\n                y: 2 * z.x * z.y\n            }\n            z = {\n                x: p.x + c.x,\n                y: p.y + c.y\n            }\n            d = 0.5 * (Math.pow(z.x, 2) + Math.pow(z.y, 2))\n            n += 1\n        } while (d <= 2 && n < MAX_ITERATION)\n\n        return [n, d <= 2]\n    }\n}\n\n\nlet code = workercode.toString();\ncode = code.substring(code.indexOf(\"{\") + 1, code.lastIndexOf(\"}\"));\n\nconst blob = new Blob([code], { type: \"application/javascript\" });\nconst worker_script = URL.createObjectURL(blob);\n\nmodule.exports = worker_script;"],"sourceRoot":""}